module game_painting_main (
    input clk,  // clock
    input rst,  // reset
    //input increase_counter,
    //input decrease_timer,
    input regfile_datain[16], //direct reading of regfile data from read_address_b
    
    input p1_button[5],
    input p2_button[5],
    input reset_button,
    
    output alufn[6],
    output asel[3],
    output bsel[3],
    output alu_out_sel[2],
    output regfile_write_address[4],
    output regfile_read_address_a[4],
    output regfile_read_address_b[4],
    output we_regfile,
    output debug[4]
    //output winning_lights[2],
    //TODO: at the correct states, modify these output values
  ) {
  .clk(clk){
    fsm game_fsm={      
      START,

      INCREASE_P1SCORE, 
      
      INCREASE_P2SCORE, 
      
      RESET_COUNTER, 
      
      CHECK_WINNER,
      BRANCH_WINNER,
      P1WINS,
      P2LOSE,
      P2WINS,
      P1LOSE,
      GAMEOVER,
      
      
      CHECK_P1_PATTERN_MATCH,
      
      CHECK_P1_PATTERN_MATCH_1,
      CHECK_P1_PATTERN_MATCH_2,
      CHECK_P1_PATTERN_MATCH_3,
      CHECK_P1_PATTERN_MATCH_4,
      CHECK_P1_PATTERN_MATCH_5,
      
      BRANCH_P1_PATTERN_MATCH,
      
      LIGHT_P1_LED,
     
      
      CHECK_P2_PATTERN_MATCH,
      
      CHECK_P2_PATTERN_MATCH_1,
      CHECK_P2_PATTERN_MATCH_2,
      CHECK_P2_PATTERN_MATCH_3,
      CHECK_P2_PATTERN_MATCH_4,
      CHECK_P2_PATTERN_MATCH_5,
      
      BRANCH_P2_PATTERN_MATCH,
      
      LIGHT_P2_LED,
      
      CHECK_GAMEFINISH,
      CHECK_FINAL_WINNER,
      CHECK_ROUND_WINNER,
      BRANCH_ROUND_WINNER,
      P1_GET_POINT,
      P2_GET_POINT,
      BRANCH_GAMEFINISH,
      ADD_ROUND_COUNTER,
      START,
      
      BRANCH_NEXTROUND,
      
      RESET_BOARD_TIME,
      RESET_BOARD,
      RESET_BOARD_2,
      RESET_TEMP_REG,
      RESET_TEMP_REG2,
      RESET_SCORE_1,
      RESET_SCORE_2,
      RESET_ROUND_COUNTER,
      
      P1_ON_BUTTON_PRESS,
      P1_MOVE_POS,
      P2_ON_BUTTON_PRESS,
      P2_MOVE_POS,
      P1_PAINT,
      P2_PAINT,
      
      ROUND_IDLE,
      CHECK_WHICH_ROUND,
      SET_ROUND_PATTERN_1,
      SET_ROUND_PATTERN_2,
      SET_ROUND_PATTERN_3,
      SET_ROUND_PATTERN_4,
      SET_ROUND_PATTERN_5
      };
    
  }
  
  always {
  
    // standard setting unless otherwise overwritten by each case 
    alufn = 0;
    asel = 0; 
    bsel = 0;
    we_regfile = 0;
    regfile_write_address = 1111;
    regfile_read_address_a = 0000;
    regfile_read_address_b = 0000;
    alu_out_sel = 0;
    
    debug = b0000;
    
    //decimal_counter_increase = 0;
    //decimal_counter_rst = 0;
    
    if (rst){
        game_fsm.d = game_fsm.START;
        //decimal_counter_rst = 1;
    }
    else{
      
    case(game_fsm.q){
      game_fsm.START:
        alufn = b000000; //ADD FUNCTION
          regfile_read_address_a = b0111; //register for round counter 
          asel = b00; //asel = output of a
          bsel = b001; //bsel = output of bsel mux is the constant 1, which is also used to shift right
          we_regfile = 1;
          regfile_write_address = b0111; //write back to round counter register
          if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
          }else{
          game_fsm.d = game_fsm.CHECK_WHICH_ROUND; //go to current round
          }
      
      //OURS:    
      game_fsm.ROUND_IDLE: //loops through the whole round checking until a trigger button is pressed, many states loops back to this state
        if (p1_button && ~p2_button){
            game_fsm.d = game_fsm.P1_ON_BUTTON_PRESS; //checks if player 1 pattern matches triggered by the final "paint button"
        }
        else if (p2_button && ~p1_button){
            game_fsm.d = game_fsm.P2_ON_BUTTON_PRESS; //checks if player 2 pattern matches
        }
        else if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }
        else{
            game_fsm.d = game_fsm.ROUND_IDLE;
        }
        
      //---------------------------------------------------------------------------------------------------------------------------------
      //BUTTON PRESSES FOR EACH PLAYER
      game_fsm.P1_ON_BUTTON_PRESS:
        alufn = b000000; //ADD
        regfile_read_address_a = b1110; //register for player 1 button press, different values for different presses
        asel = b00;
        bsel = b110; //bsel that is zero value 
        we_regfile = 1;
        regfile_write_address = b0001; //write to temp register
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }else{
          if(p1_button[4]){
            game_fsm.d = game_fsm.P1_PAINT;
          }else{
          game_fsm.d = game_fsm.P1_MOVE_POS; //move position state
          }
        }    
        
      game_fsm.P1_MOVE_POS:
        //change move_pos to shifting
        regfile_read_address_a = b1000; //Register for p1 cursor position
        regfile_read_address_b = b1000; //p1 cursor position
        if(p1_button[1]||p1_button[3]){ //if right or down
          alufn = b101100; //Shift left
          if(p1_button[1]){ //if right
             if(regfile_datain[8]!= 1){//if the MSB is not 1 means can still move right
                bsel = 001; //the +1 or move right
                we_regfile = 1;
                regfile_write_address = b1000; //writes back to p1 cursor position
              }
              else if(regfile_datain[8]==1){
                bsel = 110; //shift left by zero 0 
                we_regfile = 1;
                regfile_write_address = b1000; //writes back to p1 cursor position
              }
            }
          else if(p1_button[3]){ //if down  
             if(|regfile_datain[8:6]!= 1){//if the MSB is not 1 means can still move down
                bsel = 011; //the +3 or move down
                we_regfile = 1;
                regfile_write_address = b1000; //writes back to p1 cursor position
              }
              else{
                bsel = 110; //shift left by zero 0 
                we_regfile = 1;
                regfile_write_address = b1000; //writes back to p1 cursor position
            }
           }
          }
        else if(p1_button[0]||p1_button[2]){ //if left or up
          alufn = b101101; //Shift Right
          if(p1_button[0]){ //if left
             if(regfile_datain[0]!= 1){//if the MSB is not 1 means can still move right
                bsel = 001; //the -1 or move left
                we_regfile = 1;
                regfile_write_address = b1000; //writes back to p1 cursor position
              }
              else if(regfile_datain[0]==1){
                bsel = 110; //shift right by zero 0 
                we_regfile = 1;
                regfile_write_address = b1000; //writes back to p1 cursor position
              }
            }
          else if(p1_button[2]){ //if up 
             if(|regfile_datain[2:0]!= 1){//if the MSB is not 1 means can still move down
                bsel = 011; //the -3 or move up
                we_regfile = 1;
                regfile_write_address = b1000; //writes back to p1 cursor position
              }
              else{
                bsel = 110; //shift right by zero 0 
                we_regfile = 1;
                regfile_write_address = b1000; //writes back to p1 cursor position
            }
          }
        }
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }else{
        game_fsm.d = game_fsm.ROUND_IDLE;
        }
          
        game_fsm.P1_PAINT:
          alufn = b010010;//XOR function
          regfile_read_address_a = b1000; //p1 cursor position
          regfile_read_address_b = b0100; //p1 pattern
          asel = b00;
          bsel = b000;
          we_regfile = 1;
          regfile_write_address = b0100; //p1 pattern
          if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
          }else{
            game_fsm.d = game_fsm.CHECK_P1_PATTERN_MATCH;
          }
          
      //---------------------------------------------------------------------------------------------------------------------------------
      //BUTTON PRESSES FOR EACH PLAYER
      game_fsm.P2_ON_BUTTON_PRESS:
        alufn = b000000; //ADD
        regfile_read_address_a = b1111; //register for player 2 button press, different values for different presses
        asel = b00;
        bsel = b110; //bsel that is zero value 
        we_regfile = 1;
        regfile_write_address = b0000; //write to temp register
        if(p2_button[4]){
          game_fsm.d = game_fsm.P2_PAINT;
        }else{
        game_fsm.d = game_fsm.P2_MOVE_POS; //move position state
        }
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }
          
      game_fsm.P2_MOVE_POS:
        //change move_pos to shifting
        regfile_read_address_a = b1001; //Register for p2 cursor position
        regfile_read_address_b = b1001; //p2 cursor position
        if(p2_button[1]||p2_button[3]){ //if right or down
          alufn = b101100; //Shift left
          if(p2_button[1]){ //if right
             if(regfile_datain[8]!= 1){//if the MSB is not 1 means can still move right
                bsel = 001; //the +1 or move right
                we_regfile = 1;
                regfile_write_address = b1001; //writes back to p2 cursor position
              }
              else if(regfile_datain[8]==1){
                bsel = 110; //shift left by zero 0 
                we_regfile = 1;
                regfile_write_address = b1001; //writes back to p2 cursor position
              }
            }
          else if(p2_button[3]){ //if down  
             if(|regfile_datain[8:6]!= 1){//if the MSB is not 1 means can still move down
                bsel = 011; //the +3 or move down
                we_regfile = 1;
                regfile_write_address = b1001; //writes back to p2 cursor position
              }
              else{
                bsel = 110; //shift left by zero 0 
                we_regfile = 1;
                regfile_write_address = b1001; //writes back to p2 cursor position
            }
           }
          }
        else if(p2_button[0]||p2_button[2]){ //if left or up
          alufn = b101101; //Shift Right
          if(p2_button[0]){ //if left
             if(regfile_datain[0]!= 1){//if the MSB is not 1 means can still move right
                bsel = 001; //the -1 or move left
                we_regfile = 1;
                regfile_write_address = b1001; //writes back to p2 cursor position
              }
              else if(regfile_datain[0]==1){
                bsel = 110; //shift right by zero 0 
                we_regfile = 1;
                regfile_write_address = b1001; //writes back to p2 cursor position
              }
            }
          else if(p2_button[2]){ //if up 
             if(|regfile_datain[2:0]!= 1){//if the MSB is not 1 means can still move down
                bsel = 011; //the -3 or move up
                we_regfile = 1;
                regfile_write_address = b1001; //writes back to p2 cursor position
              }
              else{
                bsel = 110; //shift right by zero 0 
                we_regfile = 1;
                regfile_write_address = b1001; //writes back to p2 cursor position
            }
          }
        }
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }else{
        game_fsm.d = game_fsm.ROUND_IDLE;
        }
          
          
      game_fsm.P2_PAINT:
          alufn = b010010;//XOR function
          regfile_read_address_a = b1001; //p2 cursor position
          regfile_read_address_b = b0101; //p2 pattern
          asel = b00;
          bsel = b000;
          we_regfile = 1;
          regfile_write_address = b0101; //p2 pattern
          if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
          }else{
          game_fsm.d = game_fsm.CHECK_P2_PATTERN_MATCH;
          }
        
      //---------------------------------------------------------------------------------------------------------------------------------
        
          
      //---------------------------------------------------------------------------------------------------------------------------------------
      //OURS:CHECK P1 PATTERN MATCH ROUND 1
      game_fsm.CHECK_P1_PATTERN_MATCH: //general case that branches to specific pattern based on rounds
        regfile_read_address_b = b0111;      //round counter register
        if (regfile_datain==b0001){
          game_fsm.d = game_fsm.CHECK_P1_PATTERN_MATCH_1; //CHECK FOR ROUND 1
          }
        else if(regfile_datain==b0010) {
          game_fsm.d = game_fsm.CHECK_P1_PATTERN_MATCH_2; //CHECK FOR ROUND 2
          }
        else if(regfile_datain==b0011) {
          game_fsm.d = game_fsm.CHECK_P1_PATTERN_MATCH_3; //CHECK FOR ROUND 3
          }
        else if(regfile_datain==b0100) {
          game_fsm.d = game_fsm.CHECK_P1_PATTERN_MATCH_4; //CHECK FOR ROUND 4
          }
        else if(regfile_datain==b0101) {
          game_fsm.d = game_fsm.CHECK_P1_PATTERN_MATCH_5; //CHECK FOR ROUND 5
          }
          else{
          game_fsm.d = game_fsm.START;
        }
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }
        
      game_fsm.CHECK_P1_PATTERN_MATCH_1:
        alufn = b110011;                              //CMPEQ
        regfile_read_address_a = b0100;              //p1 on screen pattern register
        regfile_read_address_b = b0110;              //main central led configuration round 1
        asel = b00;                                  //uses read a
        bsel = b00;                                   //read b
        we_regfile = 1;
        regfile_write_address = b0000;                     //temp reg
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }else{
        game_fsm.d = game_fsm.BRANCH_P1_PATTERN_MATCH;
        }
          
          
      //OURS:CHECK P1 PATTERN MATCH ROUND 2
      game_fsm.CHECK_P1_PATTERN_MATCH_2:
        alufn = b110011;                              //CMPEQ
        regfile_read_address_a = b0100;              //p1 on screen pattern register
        regfile_read_address_b = b1010;              //main central led configuration round 2
        asel = b00;                                  //uses read a
        bsel = b00;                                   //read b
        we_regfile = 1;
        regfile_write_address = b0000;                      //temp reg
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }
        game_fsm.d = game_fsm.BRANCH_P1_PATTERN_MATCH;
          
          
      //OURS:CHECK P1 PATTERN MATCH ROUND 3
      game_fsm.CHECK_P1_PATTERN_MATCH_3:
        alufn = b110011;                              //CMPEQ
        regfile_read_address_a = b0100;              //p1 on screen pattern register
        regfile_read_address_b = b1011;              //main central led configuration round 3
        asel = b00;                                  //uses read a
        bsel = b00;                                   //read b
        we_regfile = 1;
        regfile_write_address = b0000;                      //temp reg
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }else{
        game_fsm.d = game_fsm.BRANCH_P1_PATTERN_MATCH;
          }
          
      //OURS:CHECK P1 PATTERN MATCH ROUND 4
      game_fsm.CHECK_P1_PATTERN_MATCH_4:
        alufn = b110011;                              //CMPEQ
        regfile_read_address_a = b0100;              //p1 on screen pattern register
        regfile_read_address_b = b1100;              //main central led configuration round 4
        asel = b00;                                  //uses read a
        bsel = b00;                                   //read b
        we_regfile = 1;
        regfile_write_address = b0000;                     //temp reg
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }else{  
        game_fsm.d = game_fsm.BRANCH_P1_PATTERN_MATCH;
        }
          
      //OURS:CHECK P1 PATTERN MATCH ROUND 5
      game_fsm.CHECK_P1_PATTERN_MATCH_5:
        alufn = b110011;                              //CMPEQ
        regfile_read_address_a = b0100;              //p1 on screen pattern register
        regfile_read_address_b = b1101;              //main central led configuration round 4
        asel = b00;                                  //uses read a
        bsel = b00;                                   //read b
        we_regfile = 1;
        regfile_write_address = b0000;                      //temp reg
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }else{
        game_fsm.d = game_fsm.BRANCH_P1_PATTERN_MATCH;
        }
          
          
      //OURS: BRANCH_P1_PATTERN_MATCH, 
      game_fsm.BRANCH_P1_PATTERN_MATCH:
        regfile_read_address_b = b0000;      //temp reg
        if (regfile_datain[0]){ //If it is true that the player 1 pattern matches the current round pattern
          //go to check winner state, the game ends!
          game_fsm.d = game_fsm.INCREASE_P1SCORE; //adds 1 to player 1 timer register to indicate p1 has finished first
          }
        else{ //if round counter is not 5 yet
          game_fsm.d = game_fsm.ROUND_IDLE;
          }
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }
          
          
      //-----------------------------------------------------------------------------------------------------------------------------------
      game_fsm.CHECK_P2_PATTERN_MATCH: //general case that branches to specific pattern based on rounds
        regfile_read_address_b = b0111;      //round counter register
        if (regfile_datain==b0001){
          game_fsm.d = game_fsm.CHECK_P2_PATTERN_MATCH_1; //CHECK FOR ROUND 1
          }
        else if(regfile_datain==b0010) {
          game_fsm.d = game_fsm.CHECK_P2_PATTERN_MATCH_2; //CHECK FOR ROUND 2
          }
        else if(regfile_datain==b0011) {
          game_fsm.d = game_fsm.CHECK_P2_PATTERN_MATCH_3; //CHECK FOR ROUND 3
          }
        else if(regfile_datain==b0100) {
          game_fsm.d = game_fsm.CHECK_P2_PATTERN_MATCH_4; //CHECK FOR ROUND 4
          }
        else if(regfile_datain==b0101) {
          game_fsm.d = game_fsm.CHECK_P2_PATTERN_MATCH_5; //CHECK FOR ROUND 5
          }
        else{
          game_fsm.d = game_fsm.START;
        }
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }
      //OURS:CHECK P2 PATTERN MATCH ROUND 1
      game_fsm.CHECK_P2_PATTERN_MATCH_1:
        alufn = b110011;                              //CMPEQ
        regfile_read_address_a = b0101;              //p2 on screen pattern register
        regfile_read_address_b = b0110;              //main central led configuration round 1
        asel = b00;                                  //uses read a
        bsel = b00;                                   //read b
        we_regfile = 1;
        regfile_write_address = b0001;                     //temp reg
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }else{
        game_fsm.d = game_fsm.BRANCH_P2_PATTERN_MATCH;}
          
          
      //OURS:CHECK P2 PATTERN MATCH ROUND 2
      game_fsm.CHECK_P2_PATTERN_MATCH_2:
        alufn = b110011;                              //CMPEQ
        regfile_read_address_a = b0101;              //p2 on screen pattern register
        regfile_read_address_b = b1010;              //main central led configuration round 2
        asel = b00;                                  //uses read a
        bsel = b00;                                   //read b
        we_regfile = 1;
        regfile_write_address = b0001;                      //temp reg
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }else{
        game_fsm.d = game_fsm.BRANCH_P2_PATTERN_MATCH;}
          
          
      //OURS:CHECK P2 PATTERN MATCH ROUND 3
      game_fsm.CHECK_P2_PATTERN_MATCH_3:
        alufn = b110011;                              //CMPEQ
        regfile_read_address_a = b0101;              //p2 on screen pattern register
        regfile_read_address_b = b1011;              //main central led configuration round 3
        asel = b00;                                  //uses read a
        bsel = b00;                                   //read b
        we_regfile = 1;
        regfile_write_address = b0001;                      //temp reg
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }else{
        game_fsm.d = game_fsm.BRANCH_P2_PATTERN_MATCH;}
          
          
      //OURS:CHECK P2 PATTERN MATCH ROUND 4
      game_fsm.CHECK_P2_PATTERN_MATCH_4:
        alufn = b110011;                              //CMPEQ
        regfile_read_address_a = b0101;              //p2 on screen pattern register
        regfile_read_address_b = b1100;              //main central led configuration round 4
        asel = b00;                                  //uses read a
        bsel = b00;                                   //read b
        we_regfile = 1;
        regfile_write_address = b0001;                      //temp reg
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }else{
          game_fsm.d = game_fsm.BRANCH_P2_PATTERN_MATCH;
          }
          
          
      //OURS:CHECK P2 PATTERN MATCH ROUND 5
      game_fsm.CHECK_P2_PATTERN_MATCH_5:
        alufn = b110011;                              //CMPEQ
        regfile_read_address_a = b0101;              //p2 on screen pattern register
        regfile_read_address_b = b1101;              //main central led configuration round 4
        asel = b00;                                  //uses read a
        bsel = b00;                                   //read b
        we_regfile = 1;
        regfile_write_address = b0001;                     //temp reg
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }else{
          game_fsm.d = game_fsm.BRANCH_P2_PATTERN_MATCH;}
          
          
      game_fsm.BRANCH_P2_PATTERN_MATCH:
        regfile_read_address_b = b0001;      //temp reg
        if (regfile_datain[0]){ //If it is true that the player 1 pattern matches the current round pattern
          //go to check winner state, the game ends!
          game_fsm.d = game_fsm.INCREASE_P2SCORE; //adds 1 to player 2 timer register to indicate p2 has finished first
          }
        else{ //if round counter is not 5 yet
          game_fsm.d = game_fsm.ROUND_IDLE;
          }
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }
          
          
      //---------------------------------------------------------------------------------------------------------------------------------------
          
      
          
      //OURS: TO end the game when the counter reaches 5    
      game_fsm.CHECK_GAMEFINISH:
          alufn = b110011; //CMPEQ for output of register for round counter and constant 5
          regfile_read_address_a = b0111; //register for round counter 
          asel = b00; //asel = output of a
          bsel = b101; //bsel = output of bsel mux is the constant 5
          we_regfile = 1;
          regfile_write_address = b0000; //temp regfile_datain
          if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
          }else{
          game_fsm.d = game_fsm.BRANCH_GAMEFINISH;}
       //after this state go to check winner state
          
          
      //OURS: BRANCH_GAMEFINISH
      game_fsm.BRANCH_GAMEFINISH:
        regfile_read_address_b = b0000;      //temp reg
        if (regfile_datain[0]){ //If it is true that the round counter == 5
          //go to check winner state, the game ends!
          game_fsm.d = game_fsm.CHECK_FINAL_WINNER;
          }
        else{ //if round counter is not 5 yet
          game_fsm.d = game_fsm.ADD_ROUND_COUNTER;
          }
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }
          
      //OURS: Add round counter, THEN ADD 1 TO CURRENT ROUND COUNTER, then prepare for next round
      game_fsm.ADD_ROUND_COUNTER:
        alufn = b000000; //ADD FUNCTION
          regfile_read_address_a = b0111; //register for round counter 
          asel = b00; //asel = output of a
          bsel = b001; //bsel = output of bsel mux is the constant 1, which is also used to shift right
          we_regfile = 1;
          regfile_write_address = b0111; //write back to round counter register
          if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
          }else{
          game_fsm.d = game_fsm.RESET_BOARD; //check who is the round winner
          }
          
          
     game_fsm.RESET_BOARD:
        alu_out_sel = b11;                       //wdsel constant 0
        we_regfile = 1;
        regfile_write_address = b0100;                 //P1 board register
        game_fsm.d = game_fsm.RESET_BOARD_2; 
          
     game_fsm.RESET_BOARD_2:
        alu_out_sel = b11;                       //wdsel constant 0
        we_regfile = 1;
        regfile_write_address = b0101;                 //P2 board register
        game_fsm.d = game_fsm.RESET_TEMP_REG; 
          
     game_fsm.RESET_TEMP_REG:  //sets temp register to 0 again
        alu_out_sel = b11;                       //wdsel constant 0
        we_regfile = 1;
        regfile_write_address = b0000;                 //1st temp reg
        game_fsm.d = game_fsm.RESET_TEMP_REG2;
          
      game_fsm.RESET_TEMP_REG2:  //sets temp register to 0 again
        alu_out_sel = b11;                       //wdsel constant 0
        we_regfile = 1;
        regfile_write_address = b0001;                 //2nd temp reg
        game_fsm.d = game_fsm.ROUND_IDLE;  
          
     
      game_fsm.RESET_ROUND_COUNTER:  //sets round counter register to 0 when reset button pressed
        alu_out_sel = b11;                       //wdsel constant 0
        we_regfile = 1;
        regfile_write_address = b0111;                 //round counter register
        game_fsm.d = game_fsm.RESET_SCORE_1; 
          
      game_fsm.RESET_SCORE_1:  //sets p1 score to 0 when reset button pressed
        alu_out_sel = b11;                       //wdsel constant 0
        we_regfile = 1;
        regfile_write_address = b0010;                 //p1 score register
        game_fsm.d = game_fsm.RESET_SCORE_2;  
          
      game_fsm.RESET_SCORE_2:  //sets p2 score to 0 when reset button pressed
        alu_out_sel = b11;                       //wdsel constant 0
        we_regfile = 1;
        regfile_write_address = b0011;                 //p2 score register
        game_fsm.d = game_fsm.RESET_BOARD;  
          
      //OURS: RESET_BOARD_TIME, to reset after each round ends and after adding scores
          
      //BRANCH NEXT ROUND TO FIND OUT WHAT ROUND NUMBER THE NEXT ROUND IS
      //game_fsm.BRANCH_NEXTROUND:
          
      /*OURS: May need to state CHECK ROUND WINNER to award points to the winner of each round
      game_fsm.CHECK_ROUND_WINNER:
        alufn = b110101;                 //CMPLT, compare less than
        regfile_read_address_a = b0010;  //P1 TIME reg 
        regfile_read_address_b = b0011;  //P2 TIME reg
        asel = b00; //a
        bsel = b000; //b
        we_regfile = 1;
        regfile_write_address = b1111;         //temp reg
        game_fsm.d = game_fsm.BRANCH_ROUND_WINNER;
          
      //BRANCH TO ROUND WINNER awards points
      game_fsm.BRANCH_ROUND_WINNER:
        regfile_read_address_b = b1111; //temp reg where we store the value of CMPLT of the times
        if (regfile_datain[0]){ //if this statement is TRUE, means player 2 FINISHES first
            //Award points to player 2
            game_fsm.d = game_fsm.INCREASE_P2SCORE; 
          }
        else{ //p1 finishes faster than p2
            //Award points to player 1
            game_fsm.d = game_fsm.INCREASE_P1SCORE; 
          }*/
          
      //INCREASES P1 score
      game_fsm.INCREASE_P1SCORE:
         alufn = b000000;                           //ADD
         regfile_read_address_a = b0010;            //P1 score reg 
         asel = b00;                                //P1 score reg 
         bsel = b001;                                //B = 1
         we_regfile = 1;                           
         regfile_write_address = b0010;                   //place back to P1 score reg
         if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
         }else{
          game_fsm.d = game_fsm.LIGHT_P1_LED;
          }
      
      //LIGHT P1 LED VIA SOME WONKY METHOD
      game_fsm.LIGHT_P1_LED:
        alufn = b000000; //add 
        regfile_read_address_a = b0000;
        asel = b00;
        bsel = b011; // large number woo
        we_regfile = 1;
        regfile_write_address = b0000; // temp regfile   
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
         }else{
          game_fsm.d = game_fsm.CHECK_GAMEFINISH;
          }              
              
      //increases P2 score
      game_fsm.INCREASE_P2SCORE:
        //set output and next state 
        alufn = b000000;                          //ADD
        regfile_read_address_a = b0011;           //P2 score reg 
        asel = b00; 
        bsel = b001;                               //B = 1
        we_regfile = 1; 
        regfile_write_address = b0011;                 //place back tot P2 score reg
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }else{
          game_fsm.d = game_fsm.LIGHT_P2_LED;
          }  
      
      //LIGHT P2 LED VIA SOME WONKY METHOD
      game_fsm.LIGHT_P2_LED:
        alufn = b000000; //add 
        regfile_read_address_a = b0001;
        asel = b00;
        bsel = b011; // large number woo
        we_regfile = 1;
        regfile_write_address = b0001; // temp regfile   
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
         }else{
          game_fsm.d = game_fsm.CHECK_GAMEFINISH;
          } 
          
              
      //--------------------------------------------------------------------------------------------------------------------------------------------
          
          
      //OURS: State to check who is the winner player 1 or player 2              
      game_fsm.CHECK_FINAL_WINNER:
        alufn = b110101;                 //CMPLT, compare less than
        regfile_read_address_a = b0010;  //P1 score reg 
        regfile_read_address_b = b0011;  //P2 score reg
        asel = b00; //a
        bsel = b000; //b
        we_regfile = 1;
        regfile_write_address = b0001;         //temp reg
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }else{
        game_fsm.d = game_fsm.BRANCH_WINNER;
          }
          
          
      //BRANCH TO THE CORRECT WINNER
      game_fsm.BRANCH_WINNER:
        regfile_read_address_b = b0001; //temp reg where we store the value of CMPLT p1 < p2
        if (regfile_datain[0]){ //if this statement is TRUE, means score p1 < p2 
            //P2 Wins, branch to P2 WIN
            game_fsm.d = game_fsm.P2WINS; 
          }
        else{ //If p1 is not < p2, means p1 has higher score
            //P1 Wins
            game_fsm.d = game_fsm.P1WINS; 
          }
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }
        
          
      //P2 WINS STATE
      game_fsm.P2WINS:
         //TODO: rewrite P1/P2wins: write a value to temp register 0000/0001 that indicates if player has won (16b1)
         // increment round counter by 1 
         // THEN branch to gameover
         we_regfile = 1;
         regfile_write_address = b0001;     //2nd temp reg
         alu_out_sel = b01;           //P2 winning signal
         if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
         }else{
         game_fsm.d = game_fsm.GAMEOVER;}
     
          
       //P1 WINS STATE
      game_fsm.P1WINS:
         we_regfile = 1;
         regfile_write_address = b0000;     //1st temp reg
         alu_out_sel = b01;           //P1 winning signal, all 16 bits 1 signal
         if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
         }else{
         game_fsm.d = game_fsm.GAMEOVER;}
 
      /*game_fsm.P1LOSE:
         we_regfile = 1;
         regfile_write_address = b0000;     //P1 score reg
         alu_out_sel = b11;           //P1 losingsignal
         game_fsm.d = game_fsm.GAMEOVER; 
          
      game_fsm.P2LOSE:
         we_regfile = 1;
         regfile_write_address = b0001;     //P2 score reg
         alu_out_sel = b11;           //P2 losing signal
         game_fsm.d = game_fsm.GAMEOVER; */
      
          
      game_fsm.GAMEOVER:
        debug = b1111;
        game_fsm.d = game_fsm.GAMEOVER;
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }
        //make sure to add a reset check for this state alongside all other states           
        
          
          
      //ROUND 1, 2, 3, 4, 5 respective states?
      //Add round number checking and setting main led screen
      game_fsm.CHECK_WHICH_ROUND:
        regfile_read_address_b = b0111;      //round counter register
        if (regfile_datain==b0001){
          game_fsm.d = game_fsm.SET_ROUND_PATTERN_1; //CHECK FOR ROUND 1
          }
        else if(regfile_datain==b0010) {
          game_fsm.d = game_fsm.SET_ROUND_PATTERN_2; //CHECK FOR ROUND 2
          }
        else if(regfile_datain==b0011) {
          game_fsm.d = game_fsm.SET_ROUND_PATTERN_3; //CHECK FOR ROUND 3
          }
        else if(regfile_datain==b0100) {
          game_fsm.d = game_fsm.SET_ROUND_PATTERN_4; //CHECK FOR ROUND 4
          }
        else if(regfile_datain==b0101) {
          game_fsm.d = game_fsm.SET_ROUND_PATTERN_5; //CHECK FOR ROUND 5
          }
          else{
          game_fsm.d = game_fsm.START;
          }
          if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }
      
      //Set central main LED for round 1
      game_fsm.SET_ROUND_PATTERN_1:
        alufn = b000000;                              //ADD
        regfile_read_address_a = b0001;              //temp register 2 to hold value for current round pattern, and route to main screen LED
        regfile_read_address_b = b0110;              //main central led configuration round 1
        asel = b00;                                  //uses read a
        bsel = b00;                                   //read b
        we_regfile = 1;
        regfile_write_address = b0001;                     //temp reg
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }else{
        game_fsm.d = game_fsm.ROUND_IDLE;}      
      
      game_fsm.SET_ROUND_PATTERN_2:
        alufn = b000000;                              //ADD
        regfile_read_address_a = b0001;              //temp register 2 to hold value for current round pattern, and route to main screen LED
        regfile_read_address_b = b1010;              //main central led configuration round 2
        asel = b00;                                  //uses read a
        bsel = b00;                                   //read b
        we_regfile = 1;
        regfile_write_address = b0001;                     //temp reg
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }else{
        game_fsm.d = game_fsm.ROUND_IDLE;}  
      
      game_fsm.SET_ROUND_PATTERN_3:
        alufn = b000000;                              //ADD
        regfile_read_address_a = b0001;              //temp register 2 to hold value for current round pattern, and route to main screen LED
        regfile_read_address_b = b1011;              //main central led configuration round 3
        asel = b00;                                  //uses read a
        bsel = b00;                                   //read b
        we_regfile = 1;
        regfile_write_address = b0001;                     //temp reg
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }else{
        game_fsm.d = game_fsm.ROUND_IDLE;}     
      
      
      game_fsm.SET_ROUND_PATTERN_4:
        alufn = b000000;                              //ADD
        regfile_read_address_a = b0001;              //temp register 2 to hold value for current round pattern, and route to main screen LED
        regfile_read_address_b = b1100;              //main central led configuration round 4
        asel = b00;                                  //uses read a
        bsel = b00;                                   //read b
        we_regfile = 1;
        regfile_write_address = b0001;                     //temp reg
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }else{
        game_fsm.d = game_fsm.ROUND_IDLE;}  
      
      game_fsm.SET_ROUND_PATTERN_5:
        alufn = b000000;                              //ADD
        regfile_read_address_a = b0001;              //temp register 2 to hold value for current round pattern, and route to main screen LED
        regfile_read_address_b = b1101;              //main central led configuration round 5
        asel = b00;                                  //uses read a
        bsel = b00;                                   //read b
        we_regfile = 1;
        regfile_write_address = b0001;                     //temp reg
        if(reset_button){
            game_fsm.d = game_fsm.RESET_ROUND_COUNTER; //resets player 1 score followed by a sequence of resets
        }else{
        game_fsm.d = game_fsm.ROUND_IDLE;}                    

      }
    } 
  }
}
